name: devbuild

on:
  pull_request:

jobs:

  build_macos:

    if: ${{ github.event_name != '' || (github.event_name == '' && github.repository_owner == 'solvcon') }}

    name: build_${{ matrix.os }}_${{ matrix.cmake_build_type }}

    runs-on: ${{ matrix.os }}

    env:
      QT_DEBUG_PLUGINS: 1

    strategy:
      matrix:
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-13-Readme.md
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-Readme.md
        os: [macos-13, macos-14]
        cmake_build_type: [Debug, Release]

      fail-fast: false

    steps:

      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: event name
        run: |
          echo "github.event_name: ${{ github.event_name }}"

      - name: dependency by homebrew
        run: |
          # export HOMEBREW_NO_AUTO_UPDATE=1
          # export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
          brew install qt6

          # brew uninstall --ignore-dependencies llvm
          brew install llvm@17
          export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
          export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
          # brew uninstall --ignore-dependencies gcc
          brew install gcc@13

          brew unlink python
          brew uninstall python
          brew install python@3.12

      - name: dependency by pip
        run: |
          echo "which python3: $(which python3)"
          ls -al $(which python3)
          python3 -m pip -v install --upgrade setuptools
          python3 -m pip -v install --upgrade pip
          python3 -m pip -v install --upgrade numpy pytest flake8
          python3 -m pip -v install --upgrade pyside6==$(qmake -query QT_VERSION)

      - name: dependency by manual script
        run: |
          sudo ${GITHUB_WORKSPACE}/contrib/dependency/install.sh pybind11
          if [ "${{ matrix.os }}" == "macos-13" ] || [ "${{ matrix.os }}" == "macos-14" ] ; then \
            thirdparty/metal-cpp.sh ; \
          fi

      - name: show dependency
        # Copy the commands from contrib/dependency/showdep.sh
        run: |
          echo "gcc path: $(which gcc)"
          echo "gcc version: $(gcc --version)"
          echo "cmake path: $(which cmake)"
          echo "cmake version: $(cmake --version)"
          echo "python3 path: $(which python3)"
          echo "python3 version: $(python3 --version)"
          echo "pip3 path: $(which pip3)"
          python3 -c 'import numpy ; print("numpy.__version__:", numpy.__version__)'
          echo "pytest path: $(which pytest)"
          echo "pytest version: $(pytest --version)"
          echo "clang-tidy path: $(which clang-tidy)"
          echo "clang-tidy version: $(clang-tidy -version)"
          echo "flake8 path: $(which flake8)"
          echo "flake8 version: $(flake8 --version)"

      - name: make gtest BUILD_QT=OFF
        run: |
          make gtest \
          VERBOSE=1 USE_CLANG_TIDY=OFF \
          BUILD_QT=OFF

      - name: make buildext BUILD_QT=OFF
        run: |
          rm -f build/*/Makefile
          make cmake \
            VERBOSE=1 USE_CLANG_TIDY=OFF \
            BUILD_QT=OFF \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3) -DUSE_PYTEST_HELPER_BINDING=ON"
          make buildext VERBOSE=1

      - name: make pytest BUILD_QT=OFF
        run: |
          JOB_MAKE_ARGS="VERBOSE=1"
          if [ "${{ matrix.os }}" == "macos-13" ] || [ "${{ matrix.os }}" == "macos-14" ] ; then \
            JOB_MAKE_ARGS="${JOB_MAKE_ARGS} BUILD_METAL=ON" ; \
          fi
          make pytest ${JOB_MAKE_ARGS}

      - name: make buildext BUILD_QT=ON USE_PYTEST_HELPER_BINDING=OFF
        run: |
          rm -f build/*/Makefile
          make cmake \
            VERBOSE=1 USE_CLANG_TIDY=OFF \
            BUILD_QT=ON \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"
          make buildext VERBOSE=1

      # build with pytest helper binding for testing
      - name: make buildext BUILD_QT=ON USE_PYTEST_HELPER_BINDING=ON
        run: |
          rm -f build/*/Makefile
          make cmake \
            VERBOSE=1 USE_CLANG_TIDY=OFF \
            BUILD_QT=ON \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3) -DUSE_PYTEST_HELPER_BINDING=ON"
          make buildext VERBOSE=1

      - name: make pytest BUILD_QT=ON USE_PYTEST_HELPER_BINDING=ON
        run: |
          # PySide6 installed by pip will bundle with a prebuilt Qt,
          # this will cause duplicated symbol.
          # Solve this issue by removed PySide6 prebuilt Qt library
          rm -rf $(python3 -c "import sys, os, PySide6; sys.stdout.write(os.path.dirname(PySide6.__file__))")/Qt/lib/*.framework
          JOB_MAKE_ARGS="VERBOSE=1"
          if [ "${{ matrix.os }}" == "macos-13" ] || [ "${{ matrix.os }}" == "macos-14" ] ; then \
            JOB_MAKE_ARGS="${JOB_MAKE_ARGS} BUILD_METAL=ON" ; \
          fi
          make pytest ${JOB_MAKE_ARGS}

      - name: make viewer
        run: |
          rm -f build/*/Makefile
          make viewer \
            VERBOSE=1 USE_CLANG_TIDY=OFF \
            BUILD_QT=ON \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3) -DUSE_PYTEST_HELPER_BINDING=ON"

      - name: make run_viewer_pytest
        run: |
          make run_viewer_pytest VERBOSE=1

      # FIXME: turn off until all issues resolved
      - name: make cmake USE_SANITIZER=ON & make pytest
        run: |
          export ASAN_OPTIONS=verify_asan_link_order=0 
          rm -f build/*/Makefile
          make cmake \
            VERBOSE=1 USE_CLANG_TIDY=OFF \
            BUILD_QT=OFF \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3) -DUSE_SANITIZER=OFF -DUSE_PYTEST_HELPER_BINDING=ON"
          make buildext VERBOSE=1
          make pytest VERBOSE=1

